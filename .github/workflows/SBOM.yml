name: Comprehensive Python Project Analysis with SBOM and Safety Scan

on:
  push:
    branches:
      - master # Adjust this as needed for your project

jobs:
  analysis:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8' # Adjust as necessary

      - name: Install Kerberos development libraries
        run: sudo apt-get update && sudo apt-get install -y libkrb5-dev

      - name: Install Python dependencies and tabulate
        run: |
          python -m pip install --upgrade pip
          pip install tabulate safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Generate comprehensive requirements.txt
        run: pip freeze > full_requirements.txt

      - name: Generate Python SBOM
        uses: CycloneDX/gh-python-generate-sbom@v2
        with:
          input: ./full_requirements.txt
          output: ./bom.json
          format: json

      - name: Parse SBOM and Create Table
        run: |
          python - <<EOF
          import json
          from tabulate import tabulate
          with open('bom.json') as bom_file:
              data = json.load(bom_file)
              components = data.get('components', [])
              headers = ['Name', 'Version', 'PURL']
              table_data = [(comp.get('name'), comp.get('version'), comp.get('purl')) for comp in components]
              table = tabulate(table_data, headers, tablefmt='github')
              with open('sbom_table.txt', 'w') as table_file:
                  table_file.write(table)
          EOF

      - uses: actions/upload-artifact@v2
        with:
          name: SBOM-Table
          path: sbom_table.txt

      - name: Run Safety and generate report
        run: safety check --json > safety_results.json

      - name: Generate vulnerability table from Safety JSON
        run: |
          cat > generate_table.py << EOF
          import json
          from tabulate import tabulate
          try:
              with open('safety_results.json') as json_file:
                  data = json.load(json_file)
                  if not data or 'issues' not in data:
                      print("No vulnerabilities found.")
                  else:
                      vulnerabilities = data['issues'] if 'issues' in data else data
                      headers = ['Package', 'Affected', 'Installed', 'Description', 'ID']
                      table_data = [
                          (
                              issue.get('package'),
                              ', '.join(issue.get('vulnerable_versions', [])),
                              issue.get('installed_version'),
                              issue.get('advisory'),
                              issue.get('cve', 'N/A')
                          )
                          for issue in vulnerabilities
                      ]
                      table = tabulate(table_data, headers=headers, tablefmt='github')
                      with open('safety_vulnerabilities_table.txt', 'w') as table_file:
                          table_file.write(table)
          except Exception as e:
              print(f"Error processing safety results: {e}")
          EOF
          python generate_table.py

      - uses: actions/upload-artifact@v2
        with:
          name: Safety-Vulnerabilities-Table
          path: safety_vulnerabilities_table.txt

name: Full Workflow - SBOM, Safety Scan, and Upload Artifacts

on:
  push:
    branches:
      - master # Adjust this as needed for your project

jobs:
  comprehensive-python-project-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install system and Kerberos development libraries
        run: sudo apt-get update && sudo apt-get install -y libkrb5-dev

      - name: Install Python dependencies, tabulate, and safety
        run: |
          python -m pip install --upgrade pip
          pip install tabulate safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Generate comprehensive requirements.txt
        run: pip freeze > full_requirements.txt

      - name: Generate Python SBOM
        uses: CycloneDX/gh-python-generate-sbom@v2
        with:
          input: ./full_requirements.txt
          output: ./bom.json
          format: json

      - name: Parse SBOM and Create Table
        run: |
          python - <<EOF
          import json
          from tabulate import tabulate
          with open('bom.json') as bom_file:
              bom = json.load(bom_file)
              components = bom.get('components', [])
              headers = ['Name', 'Version', 'PURL']
              table_data = [(comp.get('name'), comp.get('version'), comp.get('purl')) for comp in components]
              table = tabulate(table_data, headers, tablefmt='github')
              print(table)
              with open('sbom_table.txt', 'w') as table_file:
                  table_file.write(table)
          EOF

      - uses: actions/upload-artifact@v2
        with:
          name: sbom-tabular-artifact
          path: sbom_table.txt

      - name: Run Safety for vulnerability scanning
        run: |
          safety check --json > safety_results.json
          python - <<EOF
          import json
          from tabulate import tabulate
          with open('safety_results.json') as json_file:
              data = json.load(json_file)
              if not data:
                  print("No vulnerabilities found.")
              else:
                  headers = ['Package', 'Affected', 'Installed', 'Description', 'ID']
                  table_data = [(issue['package'], issue.get('vulnerable_versions'), issue.get('installed_version'), issue.get('advisory'), issue.get('cve']) for issue in data]
                  table = tabulate(table_data, headers=headers, tablefmt='github')
                  print(table)
                  with open('safety_vulnerabilities_table.txt', 'w') as table_file:
                      table_file.write(table)
          EOF

      - uses: actions/upload-artifact@v2
        with:
          name: safety-vulnerabilities-tabular-artifact
          path: safety_vulnerabilities_table.txt

name: Security Check

on:
  push:
  workflow_dispatch:

jobs:
  secret_scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          sudo apt-get install -y diffutils jq python3 python3-pip
          python -m pip install detect-secrets
          python3 -m pip install tabulate
          python -m pip install --upgrade pip
          
      - name: Run Detect Secrets Scan
        run: |
          detect-secrets scan --only-verified --exclude-files '\.git/.*' --exclude-files '\.gitmodules' >> detect_secrets_output.txt
      

      - name: Parse Detect Secrets Output
        id: parse_output
        run: |
          import json
          import os
          import sys
          import datetime

          from tabulate import tabulate
          with open("detect_secrets_output.txt", "r") as file:
              data = file.read()
          data_json = json.loads(data)
          if not data_json:
              sys.exit(0)
              
          table = []  # Initialize an empty table
          table_headers = ["Secret Type", "File", "Hashed Secret", "Line Number"]
          for file, secrets in data_json["results"].items():
              for secret in secrets:
                  if not isinstance(secret, dict):
                    continue
                  secret_type = secret.get("type", "NA")
                  filename = secret.get("filename", "NA")
                  hashed_secret = secret.get("hashed_secret", "NA")
                  line_number = secret.get("line_number", "NA")
                  row = [secret_type, filename, hashed_secret, line_number]
                  table.append(row)
                     
          print(tabulate(table, headers=table_headers, tablefmt='grid'))
          # Naming convention for the txt file
          nameofuser = "cairo"  # Replace this with your username
          nameofjob = "detect_secret"   # Replace this with the job name or any relevant identifier
          # Get the current date and time
          now = datetime.datetime.now()
          date_and_time = now.strftime("%Y-%m-%d_%H-%M")
          filename = f"{nameofuser}_{nameofjob}_{date_and_time}.txt"
          file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), filename)
          with open(file_path, "w") as file:
              file.write(tabulate(table, headers=table_headers, tablefmt='grid'))
          print(f'::set-output name=file-path::{file_path}')
        shell: python
        
      - name: Create Jira issue
        id: create_jira_issue
        run: |
          # Define the base URL of your Jira instance
          JIRA_BASE_URL="https://yashwarrdhangautam.atlassian.net"

          # Define your Jira username and API token
          JIRA_USERNAME="yashwarrdhangautam@gmail.com"
          JIRA_API_TOKEN="ATATT3xFfGF0Nv64GmBKA7b8gyXXVFZAJ0Sz7XSHZScqHd5GcPDsRjvhigus0ZSdzAGsC6--t9JEBYLt9zXATn64sGMmbZvGQW4hdW55SNjTd-drJVkECAGIP5r2D1v3i_mGkxAZFzkZGl5Bm-rX_a3KN6CtkyWYPyBeBkEdaQ_qepIirL8tJ6I=D8E578F1"


          # Define the project key and issue type for the new issue
          JIRA_PROJECT_KEY="SECURITY"
          JIRA_ISSUE_TYPE="Task"

          # Define the issue summary
          ISSUE_SUMMARY="Secret scanning"

          # Create the issue payload
          ISSUE_PAYLOAD=$(echo -n '{
            "fields": {
              "project": {"key": "'"$JIRA_PROJECT_KEY"'"},
              "summary": "'"$ISSUE_SUMMARY"'",
              "issuetype": {"name": "'"$JIRA_ISSUE_TYPE"'"}
            }
          }')

          # Call the Jira API to create the issue
          JIRA_RESPONSE=$(curl -s -X POST "$JIRA_BASE_URL/rest/api/2/issue" \
            -u "$JIRA_USERNAME:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$ISSUE_PAYLOAD")

          # Extract the issue key from the API response and set it as an output
          ISSUE_KEY=$(echo "$JIRA_RESPONSE" | jq -r '.key')
          echo "::set-output name=issue-key::$ISSUE_KEY"
        shell: bash

      - name: Attach output file to Jira issue
        run: |
          # Define the base URL of your Jira instance
          JIRA_BASE_URL="https://yashwarrdhangautam.atlassian.net"

          # Define your Jira username and API token
          JIRA_USERNAME="yashwarrdhangautam@gmail.com"
          JIRA_API_TOKEN="YOUR_JIRA_API_TOKEN"

          # Get the issue key from the previous step
          ISSUE_KEY="${{ steps.create_jira_issue.outputs.issue-key }}"

          # Get the path of the output file from the previous step
          OUTPUT_FILE="${{ steps.parse_output.outputs.file-path }}"

          # Call the Jira API to upload the output file as an attachment
          curl -X POST "$JIRA_BASE_URL/rest/api/2/issue/$ISSUE_KEY/attachments" \
            -u "$JIRA_USERNAME:$JIRA_API_TOKEN" \
            -H "X-Atlassian-Token: no-check" \
            -F "file=@$OUTPUT_FILE"
        shell: bash

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCS_SA_KEY }}'

      - name: Upload Detect Secrets Output to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: ${{ steps.parse_output.outputs.file-path }}
          destination: 'cicdpipelinee/Detect secret'
          
      - name: Check for Secrets and Exit
        run: |
          table_file="${{ steps.parse_output.outputs.file-path }}"
          table_length=$(wc -l < "$table_file")
          if [ "$table_length" -gt 0 ]; then
            echo "Secrets found in the table. Exiting workflow..."
            exit 1
          else
            echo "No secrets found. Continuing with the workflow."
          fi

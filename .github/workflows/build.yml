name: Build and Deploy Microservice with Versioning

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY_HOSTNAME: ghcr.io
  IMAGE_NAME: pepper # Change this to your repository name

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get package metadata
        id: package
        run: |
          sudo apt-get install jq
          PACKAGE_VERSION=$(cat package.json | jq -r .version)
          BUILD_DATE=$(date +%s | LC_ALL=en_US.UTF-8 numfmt --grouping | sed 's/,/_/g')

          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV

          echo "::set-output name=package-version::${PACKAGE_VERSION}"
          echo "::set-output name=build-date::${BUILD_DATE}"

      - name: Update versionInfo
        run: |
          cat <<EOF > libs/resources/versionInfo.generated.ts
          // This is automatically generated file

          export const BuildNumber = '${{ github.run_number }}';
          export const BuildVersion = '${{ steps.package.outputs['package-version'] }}';
          export const BuildDate = ${{ steps.package.outputs['build-date'] }}_000;
          export const environment: 'dev' | 'production' = 'production';
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_HOSTNAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_HOSTNAME }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.package.outputs['package-version'] }}
            ${{ env.REGISTRY_HOSTNAME }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      - name: Notify Local Endpoint
        run: |
          STATUS=0
          for i in {1..30}; do
            curl -X POST -H "Content-Type: application/json" \
                 --data '{"tag": "${{ steps.package.outputs['package-version'] }}"}' \
                 https://8a85-103-186-40-106.ngrok.io/notify \
                 && STATUS=1 && break || echo "Trying to connect..."
            sleep 1
          done
          if [ $STATUS -eq 0 ]; then
            echo "Failed to connect after 30 attempts. Exiting."
            exit 1
          fi
